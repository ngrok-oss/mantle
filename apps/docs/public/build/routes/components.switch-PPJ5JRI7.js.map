{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@radix-ui+react-switch@1.1.0_@types+react-dom@18.3.0_@types+react@18.3.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@radix-ui/react-switch/src/Switch.tsx", "../../../packages/switch/src/switch.tsx", "../../../app/routes/components.switch.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Switch\n * -----------------------------------------------------------------------------------------------*/\n\nconst SWITCH_NAME = 'Switch';\n\ntype ScopedProps<P> = P & { __scopeSwitch?: Scope };\nconst [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);\n\ntype SwitchContextValue = { checked: boolean; disabled?: boolean };\nconst [SwitchProvider, useSwitchContext] = createSwitchContext<SwitchContextValue>(SWITCH_NAME);\n\ntype SwitchElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface SwitchProps extends PrimitiveButtonProps {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  required?: boolean;\n  onCheckedChange?(checked: boolean): void;\n}\n\nconst Switch = React.forwardRef<SwitchElement, SwitchProps>(\n  (props: ScopedProps<SwitchProps>, forwardedRef) => {\n    const {\n      __scopeSwitch,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = 'on',\n      onCheckedChange,\n      ...switchProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? Boolean(button.closest('form')) : true;\n    const [checked = false, setChecked] = useControllableState({\n      prop: checkedProp,\n      defaultProp: defaultChecked,\n      onChange: onCheckedChange,\n    });\n\n    return (\n      <SwitchProvider scope={__scopeSwitch} checked={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"switch\"\n          aria-checked={checked}\n          aria-required={required}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...switchProps}\n          ref={composedRefs}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            setChecked((prevChecked) => !prevChecked);\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if switch is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect switch updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </SwitchProvider>\n    );\n  }\n);\n\nSwitch.displayName = SWITCH_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SwitchThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst THUMB_NAME = 'SwitchThumb';\n\ntype SwitchThumbElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface SwitchThumbProps extends PrimitiveSpanProps {}\n\nconst SwitchThumb = React.forwardRef<SwitchThumbElement, SwitchThumbProps>(\n  (props: ScopedProps<SwitchThumbProps>, forwardedRef) => {\n    const { __scopeSwitch, ...thumbProps } = props;\n    const context = useSwitchContext(THUMB_NAME, __scopeSwitch);\n    return (\n      <Primitive.span\n        data-state={getState(context.checked)}\n        data-disabled={context.disabled ? '' : undefined}\n        {...thumbProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nSwitchThumb.displayName = THUMB_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = React.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: boolean;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  return (\n    <input\n      type=\"checkbox\"\n      aria-hidden\n      defaultChecked={checked}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction getState(checked: boolean) {\n  return checked ? 'checked' : 'unchecked';\n}\n\nconst Root = Switch;\nconst Thumb = SwitchThumb;\n\nexport {\n  createSwitchScope,\n  //\n  Switch,\n  SwitchThumb,\n  //\n  Root,\n  Thumb,\n};\nexport type { SwitchProps, SwitchThumbProps };\n", "import { Root as SwitchPrimitiveRoot, Thumb as SwitchPrimitiveThumb } from \"@radix-ui/react-switch\";\nimport clsx from \"clsx\";\nimport { forwardRef } from \"react\";\nimport type { ComponentPropsWithoutRef, ElementRef } from \"react\";\nimport { cx } from \"../../cx\";\nimport { parseBooleanish } from \"../../types\";\n\ntype SwitchProps = ComponentPropsWithoutRef<typeof SwitchPrimitiveRoot> & {\n\t/**\n\t * Makes the element not mutable, meaning the user can not edit the control\n\t * @note This is buggy and doesn't actually stop the switch from toggling\n\t */\n\treadOnly?: boolean;\n};\n\nconst Switch = forwardRef<ElementRef<typeof SwitchPrimitiveRoot>, SwitchProps>(\n\t({ \"aria-readonly\": _ariaReadOnly, className, readOnly: _readOnly, onChange, ...props }, ref) => {\n\t\tconst readOnly = parseBooleanish(_readOnly ?? _ariaReadOnly);\n\n\t\treturn (\n\t\t\t<SwitchPrimitiveRoot\n\t\t\t\taria-readonly={readOnly}\n\t\t\t\tclassName={cx(\n\t\t\t\t\t\"peer inline-flex h-6 w-10 shrink-0 cursor-pointer items-center rounded-full outline-none sm:h-5 sm:w-9\",\n\t\t\t\t\t\"disabled:cursor-default disabled:opacity-50\",\n\t\t\t\t\t\"focus-visible:border-accent-600 focus-visible:outline-none focus-visible:ring-4 focus-visible:ring-focus-accent\",\n\t\t\t\t\t\"data-state-checked:bg-blue-500 data-state-unchecked:bg-gray-400\",\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t\tonChange={(event) => {\n\t\t\t\t\t// TODO(cody): this doesn't actually stop the radix switch from toggling\n\t\t\t\t\tif (readOnly) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tonChange?.(event);\n\t\t\t\t}}\n\t\t\t\tref={ref}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<SwitchPrimitiveThumb\n\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\"pointer-events-none block size-5 rounded-full bg-[#fff] shadow-md ring-0 transition-transform sm:size-4\",\n\t\t\t\t\t\t\"data-state-checked:translate-x-[1.125rem] data-state-unchecked:translate-x-[0.125rem]\",\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t</SwitchPrimitiveRoot>\n\t\t);\n\t},\n);\nSwitch.displayName = \"Switch\";\n\nexport {\n\t//\n\tSwitch,\n};\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/components.switch.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/components.switch.tsx\");\n  import.meta.hot.lastModified = \"1724091104717.8828\";\n}\n// REMIX HMR END\n\nimport { CodeBlock, CodeBlockBody, CodeBlockCode, CodeBlockCopyButton, fmtCode } from \"@/code-block\";\nimport { Label } from \"@/label\";\nimport { Switch } from \"@/switch\";\nimport { Example } from \"~/components/example\";\nexport const meta = () => {\n  return [{\n    title: \"@ngrok/mantle \u2014 Switch\"\n  }, {\n    name: \"description\",\n    content: \"mantle is ngrok's UI library and design system\"\n  }];\n};\nexport const headers = () => {\n  return {\n    \"Cache-Control\": \"max-age=300, stale-while-revalidate=604800\"\n  };\n};\nexport default function Page() {\n  return <div className=\"space-y-16\">\n\t\t\t<section className=\"space-y-4\">\n\t\t\t\t<h1 className=\"text-5xl font-medium\">Switch</h1>\n\t\t\t\t<p className=\"font-body text-xl text-body\">\n\t\t\t\t\tA control that allows the user to toggle between checked and not checked.\n\t\t\t\t</p>\n\t\t\t\t<div>\n\t\t\t\t\t<Example className=\"mt-4 grid gap-6\">\n\t\t\t\t\t\t<Label htmlFor=\"airplane-mode\" className=\"flex cursor-pointer items-center gap-2 has-[:disabled]:cursor-default\">\n\t\t\t\t\t\t\t<Switch id=\"airplane-mode\" readOnly />\n\t\t\t\t\t\t\t<p>Airplane Mode</p>\n\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t<Label htmlFor=\"unchecked\" className=\"flex cursor-pointer items-center gap-2 has-[:disabled]:cursor-default\">\n\t\t\t\t\t\t\t<Switch checked={false} id=\"unchecked\" readOnly />\n\t\t\t\t\t\t\t<p>Unchecked (readonly)</p>\n\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t<Label htmlFor=\"checked\" className=\"flex cursor-pointer items-center gap-2 has-[:disabled]:cursor-default\">\n\t\t\t\t\t\t\t<Switch checked={true} id=\"checked\" readOnly />\n\t\t\t\t\t\t\t<p>Checked (readonly)</p>\n\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t<Label htmlFor=\"airplane-mode-disabled-unchecked\" className=\"flex cursor-pointer items-center gap-2 has-[:disabled]:cursor-default\">\n\t\t\t\t\t\t\t<Switch disabled id=\"airplane-mode-disabled-unchecked\" readOnly />\n\t\t\t\t\t\t\t<p>Airplane Mode Disabled Unchecked (readonly)</p>\n\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t<Label htmlFor=\"airplane-mode-disabled-checked\" className=\"flex cursor-pointer items-center gap-2 has-[:disabled]:cursor-default\">\n\t\t\t\t\t\t\t<Switch checked disabled id=\"airplane-mode-disabled-checked\" readOnly />\n\t\t\t\t\t\t\t<p>Airplane Mode Disabled Checked (readonly)</p>\n\t\t\t\t\t\t</Label>\n\t\t\t\t\t</Example>\n\t\t\t\t\t<CodeBlock className=\"rounded-b-lg rounded-t-none\">\n\t\t\t\t\t\t<CodeBlockBody>\n\t\t\t\t\t\t\t<CodeBlockCopyButton />\n\t\t\t\t\t\t\t<CodeBlockCode language=\"tsx\" value={fmtCode`\n\t\t\t\t\t\t\t\t\timport { Label } from \"@ngrok/mantle/label\";\n\t\t\t\t\t\t\t\t\timport { Switch } from \"@ngrok/mantle/switch\";\n\n\t\t\t\t\t\t\t\t\t<Label\n\t\t\t\t\t\t\t\t\t\thtmlFor=\"airplane-mode\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"flex cursor-pointer items-center gap-2 has-[:disabled]:cursor-default\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Switch id=\"airplane-mode\" />\n\t\t\t\t\t\t\t\t\t\t<p>Airplane Mode</p>\n\t\t\t\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t\t\t`} />\n\t\t\t\t\t\t</CodeBlockBody>\n\t\t\t\t\t</CodeBlock>\n\t\t\t\t</div>\n\t\t\t</section>\n\n\t\t\t{/* <section className=\"mb-4 space-y-4\">\n    <h2 id=\"composition\" className=\"text-3xl font-medium\">\n    \tComposition\n    </h2>\n    <p className=\"text-xl text-body font-body\">\n    \tWhen you want to render <span className=\"italic\">something else</span> as a <InlineCode>Button</InlineCode>,\n    \tyou can use the <InlineCode>asChild</InlineCode> prop to compose. This is useful when you want to splat the{\" \"}\n    \t<InlineCode>Button</InlineCode> styling onto a <InlineCode>Link</InlineCode> from{\" \"}\n    \t<InlineCode>remix</InlineCode> or <InlineCode>react-router</InlineCode>. Keep in mind that when you use{\" \"}\n    \t<InlineCode>asChild</InlineCode> the <InlineCode>type</InlineCode> prop will <strong>NOT</strong> be passed to\n    \tthe child component.\n    </p>\n    <div>\n    \t<Example>\n    \t\t<Button appearance=\"filled\" icon={<Fire weight=\"fill\" />} asChild>\n    \t\t\t<Link to={route(\"/base/colors\")}>See our colors!</Link>\n    \t\t</Button>\n    \t</Example>\n    \t<CodeBlock className=\"rounded-b-lg rounded-t-none\">\n    \t\t<CodeBlockBody>\n    \t\t\t<CodeBlockCopyButton />\n    \t\t\t<CodeBlockCode\n    \t\t\t\tlanguage=\"tsx\"\n    \t\t\t\tvalue={fmtCode`\n    \t\t\t\t\timport { Button } from \"@ngrok/mantle/button\";\n    \t\t\t\t\timport { Fire } from \"@phosphor-icons/react\";\n    \t\t\t\t\timport { Link } from \"react-router-dom\";\n    \t\t\t\t\t\t<Button appearance=\"filled\" icon={<Fire weight=\"fill\" />} asChild>\n    \t\t\t\t\t\t<Link to=\"/base/colors\">See our colors!</Link>\n    \t\t\t\t\t</Button>\n    \t\t\t\t`}\n    \t\t\t/>\n    \t\t</CodeBlockBody>\n    \t</CodeBlock>\n    </div>\n    </section> */}\n\n\t\t\t{/* <section className=\"mt-16 space-y-4\">\n    <h2 id=\"api\" className=\"text-3xl font-medium\">\n    \tAPI Reference\n    </h2>\n    <p className=\"text-xl text-body font-body\">\n    \tThe <InlineCode>Button</InlineCode> accepts the following props in addition to the{\" \"}\n    \t<Anchor href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\">\n    \t\tstandard HTML button attributes\n    \t</Anchor>\n    \t.\n    </p>\n    <PropsTable>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"appearance\" optional />\n    \t\t<PropTypeCell>\n    \t\t\t<ul>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"ghost\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"filled\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"outlined\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"link\" />\n    \t\t\t\t</li>\n    \t\t\t</ul>\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell>\n    \t\t\t<StringPropType value=\"outlined\" />\n    \t\t</PropDefaultValueCell>\n    \t\t<PropDescriptionCell>\n    \t\t\t<p>\n    \t\t\t\tDefines the visual style of the <InlineCode>Button</InlineCode>.\n    \t\t\t</p>\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"asChild\" optional />\n    \t\t<PropTypeCell>\n    \t\t\t<BooleanPropType />\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell>\n    \t\t\t<BooleanPropType value={false} />\n    \t\t</PropDefaultValueCell>\n    \t\t<PropDescriptionCell>\n    \t\t\t<p>\n    \t\t\t\tUse the <InlineCode>asChild</InlineCode> prop to compose the <InlineCode>Button</InlineCode> styling and\n    \t\t\t\tfunctionality onto alternative element types or your own React components.\n    \t\t\t</p>\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"icon\" optional />\n    \t\t<PropTypeCell>\n    \t\t\t<ReactNodePropType />\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell />\n    \t\t<PropDescriptionCell>\n    \t\t\tAn icon to render inside the button. If the <InlineCode>state</InlineCode> is{\" \"}\n    \t\t\t<InlineCode>pending</InlineCode>, then the icon will automatically be replaced with a spinner.\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"iconPlacement\" optional />\n    \t\t<PropTypeCell>\n    \t\t\t<ul>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"start\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"end\" />\n    \t\t\t\t</li>\n    \t\t\t</ul>\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell>\n    \t\t\t<StringPropType value=\"start\" />\n    \t\t</PropDefaultValueCell>\n    \t\t<PropDescriptionCell>\n    \t\t\t<p>\n    \t\t\t\tThe side that the icon will render on, if one is present. If <InlineCode>state=\"pending\"</InlineCode>,\n    \t\t\t\tthen the loading icon will also render on this side.\n    \t\t\t</p>\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"isLoading\" optional />\n    \t\t<PropTypeCell>\n    \t\t\t<BooleanPropType />\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell>\n    \t\t\t<BooleanPropType value={false} />\n    \t\t</PropDefaultValueCell>\n    \t\t<PropDescriptionCell>\n    \t\t\t<p>\n    \t\t\t\tDetermines whether or not the button is in a loading state, default <InlineCode>false</InlineCode>.\n    \t\t\t\tSetting <InlineCode>isLoading</InlineCode> will replace any <InlineCode>icon</InlineCode> with a\n    \t\t\t\tspinner, or add one if an icon wasn't given. It will also disable user interaction with the button and\n    \t\t\t\tset <InlineCode>aria-disabled</InlineCode>.\n    \t\t\t</p>\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"priority\" optional />\n    \t\t<PropTypeCell>\n    \t\t\t<ul>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"default\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"danger\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"neutral\" />\n    \t\t\t\t</li>\n    \t\t\t</ul>\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell>\n    \t\t\t<StringPropType value=\"default\" />\n    \t\t</PropDefaultValueCell>\n    \t\t<PropDescriptionCell>\n    \t\t\t<p>\n    \t\t\t\tIndicates the importance or impact level of the button, affecting its color and styling to communicate\n    \t\t\t\tits purpose to the user.\n    \t\t\t</p>\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"type\" />\n    \t\t<PropTypeCell>\n    \t\t\t<ul>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"button\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"reset\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"submit\" />\n    \t\t\t\t</li>\n    \t\t\t</ul>\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell />\n    \t\t<PropDescriptionCell>\n    \t\t\t<p>\n    \t\t\t\tThe default behavior of the <InlineCode>Button</InlineCode>. Unlike the native{\" \"}\n    \t\t\t\t<InlineCode>button</InlineCode> element, unless you use the <InlineCode>asChild</InlineCode> prop,{\" \"}\n    \t\t\t\t<span className=\"font-semibold\">this prop is required and has no default value</span>. See{\" \"}\n    \t\t\t\t<Anchor href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#type\">\n    \t\t\t\t\tthe MDN docs\n    \t\t\t\t</Anchor>{\" \"}\n    \t\t\t\tfor more information.\n    \t\t\t</p>\n    \t\t\t<ul className=\"list-disc pl-5\">\n    \t\t\t\t<li>\n    \t\t\t\t\t<p>\n    \t\t\t\t\t\t<InlineCode>\"button\"</InlineCode>: The button has no default behavior, and does nothing when pressed\n    \t\t\t\t\t\tby default.\n    \t\t\t\t\t</p>\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<p>\n    \t\t\t\t\t\t<InlineCode>\"reset\"</InlineCode>: The button resets all the controls to their initial values.\n    \t\t\t\t\t</p>\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<p>\n    \t\t\t\t\t\t<InlineCode>\"submit\"</InlineCode>: The button submits the form data to the server.\n    \t\t\t\t\t</p>\n    \t\t\t\t</li>\n    \t\t\t</ul>\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    </PropsTable>\n    </section> */}\n\t\t</div>;\n}\n_c = Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["Switch", "import_jsx_dev_runtime", "Switch"]
}
