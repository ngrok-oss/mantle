{
  "version": 3,
  "sources": ["../../../app/routes/components.label.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/components.label.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/components.label.tsx\");\n  import.meta.hot.lastModified = \"1724091104714.9993\";\n}\n// REMIX HMR END\n\nimport { CodeBlock, CodeBlockBody, CodeBlockCode, CodeBlockCopyButton, fmtCode } from \"@/code-block\";\nimport { Input } from \"@/input\";\nimport { Label } from \"@/label\";\nimport { Example } from \"~/components/example\";\nexport const meta = () => {\n  return [{\n    title: \"@ngrok/mantle \u2014 Label\"\n  }, {\n    name: \"description\",\n    content: \"mantle is ngrok's UI library and design system\"\n  }];\n};\nexport const headers = () => {\n  return {\n    \"Cache-Control\": \"max-age=300, stale-while-revalidate=604800\"\n  };\n};\nexport default function Page() {\n  return <div className=\"space-y-16\">\n\t\t\t<section className=\"space-y-4\">\n\t\t\t\t<h1 className=\"text-5xl font-medium\">Label</h1>\n\t\t\t\t<p className=\"font-body text-xl text-body\">Renders an accessible label associated with controls.</p>\n\t\t\t\t<div>\n\t\t\t\t\t<Example className=\"grid gap-6\">\n\t\t\t\t\t\t<Label htmlFor=\"name\">\n\t\t\t\t\t\t\tName: <Input type=\"text\" id=\"name\" />\n\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t<Label htmlFor=\"name-2\">Name:</Label>\n\t\t\t\t\t\t\t<Input type=\"text\" id=\"name-2\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Label htmlFor=\"name-disabled\">\n\t\t\t\t\t\t\tName: <Input type=\"text\" id=\"name\" disabled readOnly validation=\"error\" value=\"foo\" />\n\t\t\t\t\t\t</Label>\n\t\t\t\t\t</Example>\n\t\t\t\t\t<CodeBlock className=\"rounded-b-lg rounded-t-none\">\n\t\t\t\t\t\t<CodeBlockBody>\n\t\t\t\t\t\t\t<CodeBlockCopyButton />\n\t\t\t\t\t\t\t<CodeBlockCode language=\"tsx\" value={fmtCode`\n\t\t\t\t\t\t\t\t\timport { Input } from \"@ngrok/mantle/input\";\n\t\t\t\t\t\t\t\t\timport { Label } from \"@ngrok/mantle/label\";\n\n\t\t\t\t\t\t\t\t\t<Label htmlFor=\"name\">\n\t\t\t\t\t\t\t\t\t\tName: <Input type=\"text\" id=\"name\" />\n\t\t\t\t\t\t\t\t\t</Label>\n\n\t\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t\t<Label htmlFor=\"name-2\">Name:</Label>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"text\" id=\"name-2\" />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t`} />\n\t\t\t\t\t\t</CodeBlockBody>\n\t\t\t\t\t</CodeBlock>\n\t\t\t\t</div>\n\t\t\t</section>\n\n\t\t\t{/* <section className=\"mb-4 space-y-4\">\n    <h2 id=\"composition\" className=\"text-3xl font-medium\">\n    \tComposition\n    </h2>\n    <p className=\"text-xl text-body font-body\">\n    \tWhen you want to render <span className=\"italic\">something else</span> as a <InlineCode>Button</InlineCode>,\n    \tyou can use the <InlineCode>asChild</InlineCode> prop to compose. This is useful when you want to splat the{\" \"}\n    \t<InlineCode>Button</InlineCode> styling onto a <InlineCode>Link</InlineCode> from{\" \"}\n    \t<InlineCode>remix</InlineCode> or <InlineCode>react-router</InlineCode>. Keep in mind that when you use{\" \"}\n    \t<InlineCode>asChild</InlineCode> the <InlineCode>type</InlineCode> prop will <strong>NOT</strong> be passed to\n    \tthe child component.\n    </p>\n    <div>\n    \t<Example>\n    \t\t<Button appearance=\"filled\" icon={<Fire weight=\"fill\" />} asChild>\n    \t\t\t<Link to={route(\"/base/colors\")}>See our colors!</Link>\n    \t\t</Button>\n    \t</Example>\n    \t<CodeBlock className=\"rounded-b-lg rounded-t-none\">\n    \t\t<CodeBlockBody>\n    \t\t\t<CodeBlockCopyButton />\n    \t\t\t<CodeBlockCode\n    \t\t\t\tlanguage=\"tsx\"\n    \t\t\t\tvalue={fmtCode`\n    \t\t\t\t\timport { Button } from \"@ngrok/mantle/button\";\n    \t\t\t\t\timport { Fire } from \"@phosphor-icons/react\";\n    \t\t\t\t\timport { Link } from \"react-router-dom\";\n    \t\t\t\t\t\t<Button appearance=\"filled\" icon={<Fire weight=\"fill\" />} asChild>\n    \t\t\t\t\t\t<Link to=\"/base/colors\">See our colors!</Link>\n    \t\t\t\t\t</Button>\n    \t\t\t\t`}\n    \t\t\t/>\n    \t\t</CodeBlockBody>\n    \t</CodeBlock>\n    </div>\n    </section> */}\n\n\t\t\t{/* <section className=\"mt-16 space-y-4\">\n    <h2 id=\"api\" className=\"text-3xl font-medium\">\n    \tAPI Reference\n    </h2>\n    <p className=\"text-xl text-body font-body\">\n    \tThe <InlineCode>Button</InlineCode> accepts the following props in addition to the{\" \"}\n    \t<Anchor href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\">\n    \t\tstandard HTML button attributes\n    \t</Anchor>\n    \t.\n    </p>\n    <PropsTable>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"appearance\" optional />\n    \t\t<PropTypeCell>\n    \t\t\t<ul>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"ghost\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"filled\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"outlined\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"link\" />\n    \t\t\t\t</li>\n    \t\t\t</ul>\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell>\n    \t\t\t<StringPropType value=\"outlined\" />\n    \t\t</PropDefaultValueCell>\n    \t\t<PropDescriptionCell>\n    \t\t\t<p>\n    \t\t\t\tDefines the visual style of the <InlineCode>Button</InlineCode>.\n    \t\t\t</p>\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"asChild\" optional />\n    \t\t<PropTypeCell>\n    \t\t\t<BooleanPropType />\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell>\n    \t\t\t<BooleanPropType value={false} />\n    \t\t</PropDefaultValueCell>\n    \t\t<PropDescriptionCell>\n    \t\t\t<p>\n    \t\t\t\tUse the <InlineCode>asChild</InlineCode> prop to compose the <InlineCode>Button</InlineCode> styling and\n    \t\t\t\tfunctionality onto alternative element types or your own React components.\n    \t\t\t</p>\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"icon\" optional />\n    \t\t<PropTypeCell>\n    \t\t\t<ReactNodePropType />\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell />\n    \t\t<PropDescriptionCell>\n    \t\t\tAn icon to render inside the button. If the <InlineCode>state</InlineCode> is{\" \"}\n    \t\t\t<InlineCode>pending</InlineCode>, then the icon will automatically be replaced with a spinner.\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"iconPlacement\" optional />\n    \t\t<PropTypeCell>\n    \t\t\t<ul>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"start\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"end\" />\n    \t\t\t\t</li>\n    \t\t\t</ul>\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell>\n    \t\t\t<StringPropType value=\"start\" />\n    \t\t</PropDefaultValueCell>\n    \t\t<PropDescriptionCell>\n    \t\t\t<p>\n    \t\t\t\tThe side that the icon will render on, if one is present. If <InlineCode>state=\"pending\"</InlineCode>,\n    \t\t\t\tthen the loading icon will also render on this side.\n    \t\t\t</p>\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"isLoading\" optional />\n    \t\t<PropTypeCell>\n    \t\t\t<BooleanPropType />\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell>\n    \t\t\t<BooleanPropType value={false} />\n    \t\t</PropDefaultValueCell>\n    \t\t<PropDescriptionCell>\n    \t\t\t<p>\n    \t\t\t\tDetermines whether or not the button is in a loading state, default <InlineCode>false</InlineCode>.\n    \t\t\t\tSetting <InlineCode>isLoading</InlineCode> will replace any <InlineCode>icon</InlineCode> with a\n    \t\t\t\tspinner, or add one if an icon wasn't given. It will also disable user interaction with the button and\n    \t\t\t\tset <InlineCode>aria-disabled</InlineCode>.\n    \t\t\t</p>\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"priority\" optional />\n    \t\t<PropTypeCell>\n    \t\t\t<ul>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"default\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"danger\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"neutral\" />\n    \t\t\t\t</li>\n    \t\t\t</ul>\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell>\n    \t\t\t<StringPropType value=\"default\" />\n    \t\t</PropDefaultValueCell>\n    \t\t<PropDescriptionCell>\n    \t\t\t<p>\n    \t\t\t\tIndicates the importance or impact level of the button, affecting its color and styling to communicate\n    \t\t\t\tits purpose to the user.\n    \t\t\t</p>\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    \t<PropRow>\n    \t\t<PropNameCell name=\"type\" />\n    \t\t<PropTypeCell>\n    \t\t\t<ul>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"button\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"reset\" />\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<StringPropType value=\"submit\" />\n    \t\t\t\t</li>\n    \t\t\t</ul>\n    \t\t</PropTypeCell>\n    \t\t<PropDefaultValueCell />\n    \t\t<PropDescriptionCell>\n    \t\t\t<p>\n    \t\t\t\tThe default behavior of the <InlineCode>Button</InlineCode>. Unlike the native{\" \"}\n    \t\t\t\t<InlineCode>button</InlineCode> element, unless you use the <InlineCode>asChild</InlineCode> prop,{\" \"}\n    \t\t\t\t<span className=\"font-semibold\">this prop is required and has no default value</span>. See{\" \"}\n    \t\t\t\t<Anchor href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#type\">\n    \t\t\t\t\tthe MDN docs\n    \t\t\t\t</Anchor>{\" \"}\n    \t\t\t\tfor more information.\n    \t\t\t</p>\n    \t\t\t<ul className=\"list-disc pl-5\">\n    \t\t\t\t<li>\n    \t\t\t\t\t<p>\n    \t\t\t\t\t\t<InlineCode>\"button\"</InlineCode>: The button has no default behavior, and does nothing when pressed\n    \t\t\t\t\t\tby default.\n    \t\t\t\t\t</p>\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<p>\n    \t\t\t\t\t\t<InlineCode>\"reset\"</InlineCode>: The button resets all the controls to their initial values.\n    \t\t\t\t\t</p>\n    \t\t\t\t</li>\n    \t\t\t\t<li>\n    \t\t\t\t\t<p>\n    \t\t\t\t\t\t<InlineCode>\"submit\"</InlineCode>: The button submits the form data to the server.\n    \t\t\t\t\t</p>\n    \t\t\t\t</li>\n    \t\t\t</ul>\n    \t\t</PropDescriptionCell>\n    \t</PropRow>\n    </PropsTable>\n    </section> */}\n\t\t</div>;\n}\n_c = Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCI;AAvCJ,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,sCAAwC,EAAE;AAAA,EACnF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAiC;AACjC,cAAY,IAAI,eAAe;AACjC;AAOO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,GAAG;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,EACX,CAAC;AACH;AAMe,SAAR,OAAwB;AAC7B,SAAO,mDAAC,SAAI,WAAU,cACrB,6DAAC,aAAQ,WAAU,aAClB;AAAA,uDAAC,QAAG,WAAU,wBAAuB,qBAArC;AAAA;AAAA;AAAA;AAAA,WAA0C;AAAA,IAC1C,mDAAC,OAAE,WAAU,+BAA8B,qEAA3C;AAAA;AAAA;AAAA;AAAA,WAAgG;AAAA,IAChG,mDAAC,SACA;AAAA,yDAAC,WAAQ,WAAU,cAClB;AAAA,2DAAC,SAAM,SAAQ,QAAO;AAAA;AAAA,UACf,mDAAC,SAAM,MAAK,QAAO,IAAG,UAAtB;AAAA;AAAA;AAAA;AAAA,iBAA6B;AAAA,aADpC;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC,SAAI,WAAU,2BACd;AAAA,6DAAC,SAAM,SAAQ,UAAS,qBAAxB;AAAA;AAAA;AAAA;AAAA,iBAA6B;AAAA,UAC7B,mDAAC,SAAM,MAAK,QAAO,IAAG,YAAtB;AAAA;AAAA;AAAA;AAAA,iBAA+B;AAAA,aAFhC;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,QACA,mDAAC,SAAM,SAAQ,iBAAgB;AAAA;AAAA,UACxB,mDAAC,SAAM,MAAK,QAAO,IAAG,QAAO,UAAQ,MAAC,UAAQ,MAAC,YAAW,SAAQ,OAAM,SAAxE;AAAA;AAAA;AAAA;AAAA,iBAA8E;AAAA,aADrF;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAVD;AAAA;AAAA;AAAA;AAAA,aAWA;AAAA,MACA,mDAAC,aAAU,WAAU,+BACpB,6DAAC,iBACA;AAAA,2DAAC,yBAAD;AAAA;AAAA;AAAA;AAAA,eAAqB;AAAA,QACrB,mDAAC,iBAAc,UAAS,OAAM,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAArC;AAAA;AAAA;AAAA;AAAA,eAYI;AAAA,WAdL;AAAA;AAAA;AAAA;AAAA,aAeA,KAhBD;AAAA;AAAA;AAAA;AAAA,aAiBA;AAAA,SA9BD;AAAA;AAAA;AAAA;AAAA,WA+BA;AAAA,OAlCD;AAAA;AAAA;AAAA;AAAA,SAmCA,KApCM;AAAA;AAAA;AAAA;AAAA,SA4PP;AACF;AACA,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,MAAM;AAEvB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
