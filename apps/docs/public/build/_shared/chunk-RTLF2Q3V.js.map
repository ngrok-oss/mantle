{
  "version": 3,
  "sources": ["../../../packages/theme-provider/src/preload-fonts.tsx", "../../../packages/theme-provider/src/theme-provider.tsx"],
  "sourcesContent": ["const cdnBase = \"https://cdn.ngrok.com/static/fonts\";\n\nconst fonts = [\n\t\"euclid-square/EuclidSquare-Regular-WebS.woff\",\n\t\"euclid-square/EuclidSquare-RegularItalic-WebS.woff\",\n\t\"euclid-square/EuclidSquare-Medium-WebS.woff\",\n\t\"euclid-square/EuclidSquare-Semibold-WebS.woff\",\n\t\"euclid-square/EuclidSquare-MediumItalic-WebS.woff\",\n\t\"ibm-plex-mono/IBMPlexMono-Text.woff\",\n\t\"ibm-plex-mono/IBMPlexMono-TextItalic.woff\",\n\t\"ibm-plex-mono/IBMPlexMono-SemiBold.woff\",\n\t\"ibm-plex-mono/IBMPlexMono-SemiBoldItalic.woff\",\n] as const;\n\ntype Font = (typeof fonts)[number];\n\nconst fontHref = <T extends Font>(font: T) => [cdnBase, font].join(\"/\");\n\n/**\n * Preload custom fonts used in the theme. This should be added to the head of the document in your application, preferably as high as possible.\n * Normally you won't use this directly, but instead use the `MantleThemeHeadContent` component which includes this.\n */\nconst PreloadFonts = () => (\n\t<>\n\t\t{fonts.map((font) => (\n\t\t\t<link key={font} rel=\"preload\" href={fontHref(font)} as=\"font\" type=\"font/woff\" crossOrigin=\"anonymous\" />\n\t\t))}\n\t</>\n);\n\nexport { PreloadFonts };\n", "import clsx from \"clsx\";\nimport type { PropsWithChildren } from \"react\";\nimport { createContext, useContext, useEffect, useMemo, useState } from \"react\";\nimport invariant from \"tiny-invariant\";\nimport { useMatchesMediaQuery } from \"../../hooks/src/use-matches-media-query\";\nimport { PreloadFonts } from \"./preload-fonts\";\n\n/**\n * prefersDarkModeMediaQuery is the media query used to detect if the user prefers dark mode.\n */\nconst prefersDarkModeMediaQuery = \"(prefers-color-scheme: dark)\";\n\n/**\n * prefersHighContrastMediaQuery is the media query used to detect if the user prefers high contrast mode.\n */\nconst prefersHighContrastMediaQuery = \"(prefers-contrast: more)\";\n\n/**\n * themes is a tuple of valid themes.\n */\nconst themes = [\"system\", \"light\", \"dark\", \"light-high-contrast\", \"dark-high-contrast\"] as const;\n\n/**\n * Theme is a string literal type that represents a valid theme.\n */\ntype Theme = (typeof themes)[number];\n\n/**\n * theme is a helper which translates the Theme type into a string literal type.\n */\nconst theme = <T extends Theme>(value: T) => value;\n\n/**\n * Type predicate that checks if a value is a valid theme.\n */\nfunction isTheme(value: unknown): value is Theme {\n\tif (typeof value !== \"string\") {\n\t\treturn false;\n\t}\n\n\treturn themes.includes(value as Theme);\n}\n\n/**\n * DEFAULT_STORAGE_KEY is the default key used to store the theme in localStorage.\n */\nconst DEFAULT_STORAGE_KEY = \"mantle-ui-theme\";\n\n/**\n * ThemeProviderState is the shape of the state returned by the ThemeProviderContext.\n */\ntype ThemeProviderState = [theme: Theme, setTheme: (theme: Theme) => void];\n\n/**\n * Initial state for the ThemeProviderContext.\n */\nconst initialState: ThemeProviderState = [\"system\", () => null];\n\n/**\n * ThemeProviderContext is a React Context that provides the current theme and a function to set the theme.\n */\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\n/**\n * isBrowser returns true if the code is running in a browser environment.\n */\nconst isBrowser = () => typeof window !== \"undefined\";\n\n/**\n * Gets the stored theme from localStorage or returns the default theme if no theme is stored.\n */\nfunction getStoredTheme(storageKey: string, defaultTheme: Theme = \"system\") {\n\tconst fallbackTheme = defaultTheme ?? \"system\";\n\tif (isBrowser()) {\n\t\tconst storedTheme = window.localStorage.getItem(storageKey);\n\t\treturn isTheme(storedTheme) ? storedTheme : fallbackTheme;\n\t}\n\treturn fallbackTheme;\n}\n\ntype ThemeProviderProps = PropsWithChildren & {\n\tdefaultTheme?: Theme;\n\tstorageKey?: string;\n};\n\n/**\n * ThemeProvider is a React Context Provider that provides the current theme and a function to set the theme.\n */\nfunction ThemeProvider({ children, defaultTheme = \"system\", storageKey = DEFAULT_STORAGE_KEY }: ThemeProviderProps) {\n\tconst [theme, setTheme] = useState<Theme>(() => {\n\t\tconst initialTheme = getStoredTheme(storageKey, defaultTheme);\n\t\tapplyTheme(initialTheme);\n\t\treturn initialTheme;\n\t});\n\n\tuseEffect(() => {\n\t\tconst storedTheme = getStoredTheme(storageKey, defaultTheme);\n\t\tsetTheme(storedTheme);\n\t\tapplyTheme(storedTheme);\n\t}, [defaultTheme, storageKey]);\n\n\tuseEffect(() => {\n\t\tconst prefersDarkMql = window.matchMedia(prefersDarkModeMediaQuery);\n\t\tconst prefersHighContrastMql = window.matchMedia(prefersHighContrastMediaQuery);\n\n\t\tconst onChange = () => {\n\t\t\tconst storedTheme = getStoredTheme(storageKey, defaultTheme);\n\n\t\t\t// If the stored theme is not \"system\", then the user has explicitly set a theme and we should not\n\t\t\t// automatically change the theme when the user's system preferences change.\n\t\t\tif (storedTheme !== \"system\") {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tapplyTheme(\"system\");\n\t\t};\n\n\t\tprefersDarkMql.addEventListener(\"change\", onChange);\n\t\tprefersHighContrastMql.addEventListener(\"change\", onChange);\n\n\t\treturn () => {\n\t\t\tprefersDarkMql.removeEventListener(\"change\", onChange);\n\t\t\tprefersHighContrastMql.removeEventListener(\"change\", onChange);\n\t\t};\n\t}, [defaultTheme, storageKey]);\n\n\tconst value: ThemeProviderState = useMemo(\n\t\t() => [\n\t\t\ttheme,\n\t\t\t(theme: Theme) => {\n\t\t\t\twindow.localStorage.setItem(storageKey, theme);\n\t\t\t\tsetTheme(theme);\n\t\t\t\tapplyTheme(theme);\n\t\t\t},\n\t\t],\n\t\t[storageKey, theme],\n\t);\n\n\treturn <ThemeProviderContext.Provider value={value}>{children}</ThemeProviderContext.Provider>;\n}\n\n/**\n * useTheme returns the current theme and a function to set the theme.\n *\n * @note This function will throw an error if used outside of a ThemeProvider context tree.\n */\nfunction useTheme() {\n\tconst context = useContext(ThemeProviderContext);\n\n\tinvariant(context, \"useTheme must be used within a ThemeProvider\");\n\n\treturn context;\n}\n\n/**\n * Applies the given theme to the <html> element.\n */\nfunction applyTheme(theme: Theme) {\n\tif (!isBrowser()) {\n\t\treturn;\n\t}\n\n\tconst htmlElement = window.document.documentElement;\n\thtmlElement.classList.remove(...themes);\n\tconst prefersDarkMode = window.matchMedia(prefersDarkModeMediaQuery).matches;\n\tconst prefersHighContrast = window.matchMedia(prefersHighContrastMediaQuery).matches;\n\tconst newTheme = resolveTheme(theme, { prefersDarkMode, prefersHighContrast });\n\thtmlElement.classList.add(newTheme);\n\thtmlElement.dataset.appliedTheme = newTheme;\n\thtmlElement.dataset.theme = theme;\n}\n\n/**\n * If the theme is \"system\", it will resolve the theme based on the user's media query preferences, otherwise it will return the theme as is.\n * This will mirror the result that gets applied to the <html> element.\n */\nfunction resolveTheme(\n\ttheme: Theme,\n\t{ prefersDarkMode, prefersHighContrast }: { prefersDarkMode: boolean; prefersHighContrast: boolean },\n) {\n\tif (theme === \"system\") {\n\t\treturn determineThemeFromMediaQuery({ prefersDarkMode, prefersHighContrast });\n\t}\n\n\treturn theme;\n}\n\n/**\n * If the theme is \"system\", it will resolve the theme based on the user's media query preferences, otherwise it will return the theme as is.\n * This will mirror the result that gets applied to the <html> element.\n */\nfunction useAppliedTheme() {\n\tconst [theme] = useTheme();\n\n\tconst prefersDarkMode = useMatchesMediaQuery(prefersDarkModeMediaQuery);\n\tconst prefersHighContrast = useMatchesMediaQuery(prefersHighContrastMediaQuery);\n\n\treturn resolveTheme(theme, { prefersDarkMode, prefersHighContrast });\n}\n\n/**\n * determineThemeFromMediaQuery returns the theme that should be used based on the user's media query preferences.\n * @private\n */\nexport function determineThemeFromMediaQuery({\n\tprefersDarkMode,\n\tprefersHighContrast,\n}: {\n\tprefersDarkMode: boolean;\n\tprefersHighContrast: boolean;\n}) {\n\tif (prefersHighContrast) {\n\t\treturn prefersDarkMode ? \"dark-high-contrast\" : \"light-high-contrast\";\n\t}\n\n\treturn prefersDarkMode ? \"dark\" : \"light\";\n}\n\nfunction preventWrongThemeFlashScriptContent({\n\tdefaultTheme = \"system\",\n\tstorageKey = DEFAULT_STORAGE_KEY,\n}: {\n\tdefaultTheme?: Theme;\n\tstorageKey?: string;\n}) {\n\treturn `\n(function() {\n\tconst themes = ${JSON.stringify(themes)};\n\tconst isTheme = (value) => typeof value === \"string\" && themes.includes(value);\n\tconst fallbackTheme = \"${defaultTheme}\" ?? \"system\";\n\tconst maybeStoredTheme = window.localStorage.getItem(\"${storageKey}\");\n\tconst hasStoredTheme = isTheme(maybeStoredTheme);\n\tif (!hasStoredTheme) {\n\t\twindow.localStorage.setItem(\"${storageKey}\", fallbackTheme);\n\t}\n\tconst themePreference = hasStoredTheme ? maybeStoredTheme : fallbackTheme;\n\tconst prefersDarkMode = window.matchMedia(\"${prefersDarkModeMediaQuery}\").matches;\n\tconst prefersHighContrast = window.matchMedia(\"${prefersHighContrastMediaQuery}\").matches;\n\tlet initialTheme = themePreference;\n\tif (initialTheme === \"system\") {\n\t\tif (prefersHighContrast) {\n\t\t\tinitialTheme = prefersDarkMode ? \"dark-high-contrast\" : \"light-high-contrast\";\n\t\t} else {\n\t\t\tinitialTheme = prefersDarkMode ? \"dark\" : \"light\";\n\t\t}\n\t}\n\tconst htmlElement = document.documentElement;\n\thtmlElement.classList.remove(...themes);\n\thtmlElement.classList.add(initialTheme);\n\thtmlElement.dataset.appliedTheme = initialTheme;\n\thtmlElement.dataset.theme = themePreference;\n})();\n`.trim();\n}\n\n/**\n * MantleThemeHeadContent is a React component that prevents the wrong theme from flashing on initial page load.\n * Render as high as possible in the <head> element.\n */\nconst MantleThemeHeadContent = ({\n\tdefaultTheme = \"system\",\n\tstorageKey = DEFAULT_STORAGE_KEY,\n}: {\n\tdefaultTheme?: Theme;\n\tstorageKey?: string;\n}) => (\n\t<>\n\t\t<script\n\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t__html: preventWrongThemeFlashScriptContent({ defaultTheme, storageKey }),\n\t\t\t}}\n\t\t/>\n\t\t<PreloadFonts />\n\t</>\n);\n\ntype InitialThemeProps = {\n\tclassName: string;\n\t\"data-applied-theme\": Omit<Theme, \"system\">;\n\t\"data-theme\": Theme;\n};\n\n/**\n * useInitialHtmlThemeProps returns the initial props that should be applied to the <html> element to prevent react hydration errors.\n */\nfunction useInitialHtmlThemeProps(props?: {\n\tclassName?: string;\n\tdefaultTheme?: Theme;\n\tstorageKey?: string;\n}): InitialThemeProps {\n\tconst { className = \"\", defaultTheme = \"system\", storageKey = DEFAULT_STORAGE_KEY } = props ?? {};\n\n\treturn useMemo(() => {\n\t\tif (!isBrowser()) {\n\t\t\treturn {\n\t\t\t\tclassName: clsx(className),\n\t\t\t\t\"data-applied-theme\": \"system\",\n\t\t\t\t\"data-theme\": \"system\",\n\t\t\t};\n\t\t}\n\n\t\tconst prefersDarkMode = window.matchMedia(prefersDarkModeMediaQuery).matches;\n\t\tconst prefersHighContrast = window.matchMedia(prefersHighContrastMediaQuery).matches;\n\t\tconst initialTheme = getStoredTheme(storageKey, defaultTheme);\n\t\tconst reolvedTheme = resolveTheme(initialTheme, { prefersDarkMode, prefersHighContrast });\n\n\t\treturn {\n\t\t\tclassName: clsx(className, reolvedTheme),\n\t\t\t\"data-applied-theme\": reolvedTheme,\n\t\t\t\"data-theme\": initialTheme,\n\t\t};\n\t}, [className, defaultTheme, storageKey]);\n}\n\nexport type { Theme, ThemeProviderProps };\nexport {\n\tisTheme,\n\tMantleThemeHeadContent,\n\tpreventWrongThemeFlashScriptContent,\n\ttheme,\n\tThemeProvider,\n\tuseAppliedTheme,\n\tuseInitialHtmlThemeProps,\n\tuseTheme,\n};\n"],
  "mappings": "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",
  "names": ["import_jsx_dev_runtime", "theme"]
}
